(async () => {
    let url = "https:\/\/www.quickpanel.in\/";
    let title = "QuickPanel";
    let website_pixel_key = "0utBxjuCX2GVwig1";
    let website_host = "rojgarresult.app";  // This will work for 'www.rojgarresult.app', 'rojgarresult.app', and 'alert.rojgarresult.app'
    let user_analytics_is_enabled = true;
    let pixel_exposed_identifier = "pusher";

    /* Make sure the website loads only where expected */
    if (!window.location.hostname.includes(website_host)) {
        console.log(`${title} (${url}): Website does not match the set domain/subdomain.`);
        return;
    }

    /* Make sure service workers are available in the browser */
    if (!('serviceWorker' in navigator)) {
        return;
    }

    /* Make sure push api is available in the browser */
    if (!('PushManager' in window)) {
        return;
    }

    /* Register the main service worker */
    let public_key = "BBsh736IWv_0pqDl2foq6-Xc6mq3zY91H6fjkuDrbrm_hITCpfBXtdpj88LjiDAAfT-pi7z0niZ5Qk8wE2ovF3g";
    await navigator.serviceWorker.register("https:\/\/alert.rojgarresult.app\/quickpanel_push.js", {
        scope: "https:\/\/alert.rojgarresult.app\/",
    });

    /* Helper to easily send logs */
    let send_tracking_data = async data => {
        if (!user_analytics_is_enabled) return;

        try {
            navigator.sendBeacon(`${url}pixel-track/${website_pixel_key}`, JSON.stringify(data));
        } catch (error) {
            console.log(`${title} (${url}): ${error}`);
        }
    }

    /* Get the current notification permission status */
    let get_notification_permission = async () => {
        return Notification.permission;
    }

    /* Get the current status of the web push subscription */
    let get_subscription_status = async () => {
        let sw = await navigator.serviceWorker.ready;
        let subscription = await sw.pushManager.getSubscription();
        return subscription ? true : false;
    };

    /* Unsubscribe function */
    let unsubscribe = async () => {
        let sw = await navigator.serviceWorker.ready;
        let subscription = await sw.pushManager.getSubscription();

        if (!subscription) {
            /* Dispatch custom JS event */
            window.dispatchEvent(new Event(`${pixel_exposed_identifier}.unsubscribed`));
            return true;
        }

        await subscription.unsubscribe();

        /* Prepare form data with additional info */
        let subscription_data = subscription.toJSON();
        let user_id = "USER_ID"; // Fetch user ID from your app or session
        let device_info = {
            device: navigator.userAgent,
            platform: navigator.platform
        };
        let location = await getUserLocation(); // Assuming this function returns user location

        let data = {
            endpoint: subscription_data.endpoint,
            auth: subscription_data.keys.auth,
            p256dh: subscription_data.keys.p256dh,
            pixel_key: website_pixel_key,
            url: window.location.href,
            type: 'delete',
            user_id: user_id,
            device_info: device_info,
            location: location,
            referrer: document.referrer,
            page_title: document.title
        };

        /* Send request to server */
        let response = await fetch(`${url}pixel-track/${website_pixel_key}`, {
            method: 'post',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        });

        /* Dispatch custom JS event */
        window.dispatchEvent(new Event(`${pixel_exposed_identifier}.unsubscribed`));

        return true;
    }

    /* Subscribe function */
    let subscribe = async () => {
        // Check if permission is already granted
        if (Notification.permission === 'granted') {
            let sw = await navigator.serviceWorker.ready;
            let subscription = await sw.pushManager.subscribe({
                userVisibleOnly: true,
                applicationServerKey: public_key
            });

            // Prepare subscription data
            let subscription_data = subscription.toJSON();
            let user_id = "USER_ID"; // Fetch user ID from your app or session
            let device_info = {
                device: navigator.userAgent,
                platform: navigator.platform
            };
            let location = await getUserLocation();

            let data = {
                endpoint: subscription_data.endpoint,
                auth: subscription_data.keys.auth,
                p256dh: subscription_data.keys.p256dh,
                pixel_key: website_pixel_key,
                url: window.location.href,
                type: 'create',
                user_id: user_id,
                device_info: device_info,
                location: location,
                referrer: document.referrer,
                page_title: document.title
            };

            // Send subscription data to server
            await send_tracking_data(data);

            // Dispatch event for subscription success
            window.dispatchEvent(new Event(`${pixel_exposed_identifier}.subscribed`));

            // Close the window after subscription
            window.close(); // This will close the current window/tab

            return true;
        }

        // If permission isn't granted, request it
        let permission = await Notification.requestPermission();
        if (permission === 'granted') {
            // Retry subscription process after permission is granted
            return subscribe();
        } else {
            console.log('Notification permission denied');
            return false;
        }
    }

    /* Utility function to get user location */
    async function getUserLocation() {
        return new Promise((resolve, reject) => {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(position => {
                    resolve({
                        latitude: position.coords.latitude,
                        longitude: position.coords.longitude
                    });
                }, () => {
                    resolve(null); // Fallback if location is not available
                });
            } else {
                resolve(null);
            }
        });
    }

    // Call the subscribe function to trigger the flow
    await subscribe();
})();
